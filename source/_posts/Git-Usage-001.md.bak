title: 【原创】git资料整理系列之一
date: 2017-05-16 18:58:35
tags:
- git
- git remote
categories: 随笔
description: 前段时间看l
---Git的常用操作：


Git和svn的优势：


1.创建空Git库 或者 重置（） 

  cd 到你选择的目录（cd 到改目录）后执行下面指令:     [初始化仓库--- 执行成功，会生成.git目录。这个.git目录存储着管理当前目录内容所属的仓库数据]

   git init

2.查看当前未添加未提交的（1.工作区和stage的差异 2.stage和HEAD的差异－除此之外都是与HEAD的一样）

  git status（差异可以用 git diff 文件）

  git diff         //查看当前工作区与暂存区  的差别 
  git diff --cached      //查看暂存区和本地仓库的差别

  下面操作 如果不确定当前内容：可以在指令之后加-p 进入交互模式（会提示操作前后的差异）
   (新增文件不生效? git add * 生效)
3.添加 or 修改到库中（可用交互方式）  [提交前可参看 “查询记录 3）”查看代码的差异]
 1) git add <files>  / *              //添加到 暂存区(Stage或者Index)
     git add -i                             //Good,交互式选择性界面进行添加，
     git add -p                            //交互式查看内容差异选择
 2) git commit -m "描述"    //提交到仓库
 git commit -am "描述"     //git add 和 git commit的结合。直接提交到仓库 【很危险】
 3) git commit --amend       //修改提交信息
 4) git rebase -i   HEAD~2    //压缩历史(把这次的提交和之前的提交 这两个历史记录  压缩成一个历史记录)，  常见： 例如发现已经提交的内容中有些拼写错误等，rebase将这个修改包含前一个提交之中，压缩成一个历史记录
    在编辑器中编辑
    pick  xxxx1  描述1
    pick  xxxx2  描述2 // 把这个改成  fixup xxxx2  描述2
4.删除文件（可用交互方式）
  1）rm <files>                  //本地删除  
  2）git rm <files>             //从HEAD中（即已提交）删除，放在stage里（未提交）
       git rm --cached <files>             //从stage中（即已index）删除，放在workding里（工作空间）
  3）git commit -m ‘描述'  //提交到
  
  
  
5.还原文件（可用交互方式）


 1）撤销workspace级别的
git checkout  -- <files>     //还原未add(即未index)的文件       --->从stage还原到工作区 
                                                            
git checkout  -- .     //还原未add(即未index)的所有文件        //很危险，本地修改的会无声息地被覆盖
git checkout branch  -- <files>        //   /uncommit & unstage & unworkspace.本地仓库以及stage修改的会无声息地被覆盖
#查看哪些文件和目录会被删除
 git clean  -nd     //查看remove Untracked files  (即删除本地多余的文件和目录 ，未add新增的文件)
 git clean  -fd     //remove Untracked files

#如果要还原已经被删除的
git checkout HEAD~1 -- <files> //从历史中恢复某文件

2）撤销stage级别的
 git reset HEAD <files>   //unstage(不会回退commit的), 还原已经add(即已经index)的到工作区  -->从HEAD还原到stage
   git reset -- <files>   //unstage(不会回退commit的), 还原已经add(即已经index)的到工作区  -->从HEAD还原到stage
    git reset HEAD      //unstage所有的文件(不会回退commit的),还原所有已经add SS
 3) 撤销commit级别的
git reset <commit_id> //uncommit & unstage  //commit_id -->  HEAD^  or HEAD^^ or HEAD~100 or 版本号(前几位即可)
 (git reset --mixed 是默认的，会回退commit和index信息)
  git reset --soft <commit_id>  //uncommit,不回退index信息 
  git reset --hard <commit_id>  //uncommit & unstage & unworkspace,会回退commit、index和工作区(workspace)信息
                                //文件全部回退到当前版本，不可恢复。慎用！！！
(commid_id  1⃣️可通过 git log 取前几位即可查看HEAD版本之前－不一定最新 2⃣️git reflog查看历史操作记录)   

 4) 撤销操作级别的(通过git reflog)
   git reset --hard  <commit_id>  //会直接回退到这个版本,//文件全部回退到当前版本，git log不可恢复。慎用！！！但是可以通过 git reflog
   git reset  <commit_id>  //会回退这个reflog下一个操作到workspace
   git reset  <commit_id>  //会回退这个reflog下一个操作到index里
  

6.查询记录
  1）git log --  <files>          //查看提交的历史（HEAD之前的，之后的版本无展示）  
       git log --pretty=oneline   //只显示提交信息的第一行
       git log -p  [<file>]     //文件的前后差别就会显示在提交后的信息
       git log  --graph    //可以用图表形式输出提交日志   --也可以看到 图表形式分支的提交
  2）git reflog -- <files>   //查看历史操作记录。 查看当前仓库执行过的操作的日志
  (回退到某个版本之后，HEAD指向该版本，git log是查询HEAD之前的版本－－即新版的看不到。 使用git reflog 查看操作记录)
  3） git diff              //查看当前工作区与暂存区  的差别
    git diff HEAD       //查看工作区和最新提交（即本地仓库）的差别
    git diff --cached       //查看暂存区和本地仓库的差别
  4) 分支的查看 可以分支管理部分
       git branch -a       //查看所有版本
       git branch           //查看当前分支：git branch -r 或者 git branch
       git log  --graph    //可以用图表形式输出提交日志   --也可以看到 图表形式分支的提交
  